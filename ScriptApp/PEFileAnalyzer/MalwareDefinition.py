from datetime import datetime
import re
from os import stat, environ

from lxml import etree

from PEFileAnalyzer.VTLibrary import getScore
# from VTLibrary import getScore

# score / 10
# coef / 100

MAX_SIZE=500000
MAX_SECTIONS=25
PATH=environ['VIRTUAL_ENV']+'/../'

sectionsDefault=['.text', '.data', '.rdata', '.idata', '.edata', '.pdata', '.rsrc', '.reloc']

def detectIP(stringsList):
	regIP='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])'
	score=0
	
	for s in stringsList:
		if re.match(regIP, s):
			score=7
			break

	return score

def inconsistentSections(sectionsList):
	score=0

	for s in sectionsList:
		if s not in sectionsDefault:
			score=5
			break

	return score

def inconsistentCompileDate(cdate):
	now = datetime.now()
	score=0

	if cdate > now:
		score=8
	
	return score

def VTScore(h):
	return getScore(h)*10

def load_funclist():
	l=[]
	tree = etree.parse(PATH+'ScriptApp/PEFileAnalyzer/functions.xml')
	root = tree.getroot()
	libs = root[0]

	for lib in libs:
		for fcts in lib:
			for f in fcts:
				d=dict()
				d['dll']=lib.attrib['name']
				try:
					d['dll_mal']=(lib_attrib['bl']=='1')
				except:
					d['dll_mal']=False
				try:
					d['fct_mal']=(f.attrib['bl']=='1')
				except:
					d['fct_mal']=False
				
				d['fct']=f.text
				# print(d)
				l.append(d)

	return l

def get_malDLL(l):
	d=[]

	for e in l:
		print(e['dll_mal'])
		if e['dll_mal'] and (e['dll'] not in d):
			d.append(e['dll'])
	
	return d

def get_malFunc(l):
	d=[]
	for e in l:
		if e['fct_mal'] and (e['fct'] not in d):
			d.append(e['fct'])
	return d

def get_fctNames(l):
	r=[]
	for d in l:
		r.append(d['fct'])
	return r

def get_nbDangerousFunctions(l):
	nb=0

	for f in l:
		if f in get_fctNames(load_funclist()):
			nb+=1

	return nb

def functionScore(imports):
	return get_nbDangerousFunctions(imports)*10/len(imports)

def get_size(f):
	return (stat(f)).st_size

def overSized(f):
	return get_size(f)>=MAX_SIZE

def sectionsOverflow(l):
	return len(l)>=MAX_SECTIONS

def main():
	# print(VTScore("3145c517faf07480ca1f08ec44301503"))
	# print(functionScore(["Func1", "CreateRemoteThread"]))
	print(overSized('functions.xml'))

if __name__ == '__main__':
	main()