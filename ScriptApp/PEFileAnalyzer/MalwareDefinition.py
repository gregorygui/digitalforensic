from datetime import datetime
import re
import yara
from os import stat, environ

from lxml import etree

from PEFileAnalyzer.VTLibrary import getScore

# score / 10
# coef / 100

MAX_SIZE=50e+06
MAX_SECTIONS=25
PATH=environ['VIRTUAL_ENV']+'/../'

sectionsDefault=['.text', '.data', '.rdata', '.idata', '.edata', '.pdata', '.rsrc', '.reloc', '.tls']

def detectIP(stringsList):
	regIP='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])'
	score=0
	
	for s in stringsList:
		if re.match(regIP, s):
			score=7
			break

	return score

def detectHostname(stringsList):
	regHN='(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$'

	score=0
	
	for s in stringsList:
		if re.match(regHN, s):
			score=7
			break

	return score

def detectConFunc(stringsList):
	regF='((?:sock)|(?:ip)|(?:svr)|(?:listen)|(?:send)|(?:url)|(?:Internet)|(?:host)|(?:recv))'
	score=0
	
	for s in stringsList:
		if re.match(regF, s, flags=re.IGNORECASE):
			score=7
			break

	return score

def detectRemoteConnection(stringsList):
	return int((detectHostname(stringsList)+detectIP(stringsList)+detectConFunc(stringsList))/3)

def inconsistentSections(sectionsList):
	nb=0

	for s in sectionsList:
		if s not in sectionsDefault:
			nb+=1

	return nb

def inconsistentCompileDate(cdate):
	now = datetime.now()
	init = datetime(1975,1,1)
	score=0

	if (cdate > now) or (cdate < init):
		score=8
	
	return score

def VTScore(h):
	return getScore(h)*10

def load_funclist():
	l=[]
	tree = etree.parse(PATH+'ScriptApp/PEFileAnalyzer/functions.xml')
	root = tree.getroot()
	libs = root[0]

	for lib in libs:
		for fcts in lib:
			for f in fcts:
				d=dict()
				d['dll']=lib.attrib['name']
				try:
					d['dll_mal']=(lib_attrib['bl']=='1')
				except:
					d['dll_mal']=False
				try:
					d['fct_mal']=(f.attrib['bl']=='1')
				except:
					d['fct_mal']=False
				
				d['fct']=f.text
				# print(d)
				l.append(d)
	return l

def get_malDLL(l):
	d=[]

	for e in l:
		print(e['dll_mal'])
		if e['dll_mal'] and (e['dll'] not in d):
			d.append(e['dll'])
	
	return d

def get_malFunc(l):
	d=[]
	for e in l:
		if e['fct_mal'] and (e['fct'] not in d):
			d.append(e['fct'])
	return d

def get_fctNames(l):
	r=[]
	for d in l:
		r.append(d['fct'])
	return r

def get_nbDangerousFunctions(imp):
	nb=0
	l=[]
	ref=get_fctNames(load_funclist())

	for f in imp:
		l+=imp[f]

	for f in l:
		if f in ref:
			nb+=1

	return nb/len(l)

def functionScore(imports):
	return get_nbDangerousFunctions(imports)*10

def get_size(f):
	return (stat(f)).st_size

def overSized(f):
	return get_size(f)>=MAX_SIZE

def sectionsOverflow(l):
	return len(l)>=MAX_SECTIONS

def stringsScore(defStrings, strings):
	tot=0
	nb=1
	for ds in defStrings:
		reg = '(?:'+ds+')'
		for s in strings:
			if re.match(reg, s, flags=re.IGNORECASE):
				tot+=defStrings[ds]
				nb+=1

	return round(tot/nb, 2)

def stringsScore2(defStrings, file):
	l=[]
	counter=0
	rule=""

	for s in defStrings:
		rule+='rule SCMP_'+str(counter)+' {\n\tstrings:'
		rule+='\n\t$s'+str(counter)+"=\""+s+"\""
		rule+="\n\n\tcondition:\n\t"+"$s"+str(counter)+"\n}\n\n"
		counter+=1

	rules = yara.compile(source=rule)

	return rules.match(file)

def main():
	# print(VTScore("3145c517faf07480ca1f08ec44301503"))
	# print(functionScore(["Func1", "CreateRemoteThread"]))
	print(stringsScore2(['sys', 'os', 'tyegd'], '../../WebApp/manage.py'))

if __name__ == '__main__':
	main()