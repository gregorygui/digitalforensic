import pefile
import peutils
import string
import datetime
import hashlib

class peData:
 	"""Analyze a PE file"""
 	def __init__(self, filename):
 		self.filename=filename
 		self.file = pefile.PE(filename)
 		self.signatures = peutils.SignatureDatabase("userdb.txt")

 	def getOEP(self):
 		return self.file.OPTIONAL_HEADER.AddressOfEntryPoint

 	def getSections(self):
 		dictSections={}
 		for section in self.file.sections:
 			key=section.Name
 			dictSections[key.decode('ascii')]=section.VirtualAddress
 		return dictSections

 	def getImports(self):
 		if hasattr(self.file, 'DIRECTORY_ENTRY_IMPORT'):
 			listImports={}
 			for entry in self.file.DIRECTORY_ENTRY_IMPORT:
 				e=entry.dll
 				for i in entry.imports:
 					listImports[e.decode('ascii')]=(i.name).decode('ascii')
 			return listImports
 		else:
 			return None

 	def getExports(self):
 		listExports=[]
 		if hasattr(self.file, 'DIRECTORY_ENTRY_EXPORT'):
 			for e in self.file.DIRECTORY_ENTRY_EXPORT.symbols:
 				linecacheistExports+=(e.name).decode('ascii')
 			return listExports
 		else:
 			return None

 	def isPacked(self):
 		try:
 			m=self.signatures.match(self.file, ep_only=True)
 		except:
 			m=None
 		return m

 	def getStrings(self):
 		strings=list()
 		f=open(self.filename,errors="ignore")
 		s=""
 		for c in f.read():
 			if c in string.printable:
 				s+=c
 				continue
 			if len(s)>=4:
 				strings.append(s)
 			s=""
 		if len(s)>=4:
 			strings.append(s)
 		f.close()

 		return strings

 	def getDate(self):
 		timestamp=self.file.FILE_HEADER.TimeDateStamp
 		return datetime.datetime.fromtimestamp(timestamp/1e3)

 	def getMD5(self):
 		return hashlib.md5(open(self.filename, 'rb').read()).hexdigest()

 	def getSHA256(self):
 		return hashlib.sha256(open(self.filename, 'rb').read()).hexdigest()


def main():
	file="/home/harrapx/Documents/MalwareLabs/BinaryCollection/Chapter_11L/Lab11-01.exe"
	Packedfile="/home/harrapx/Documents/MalwareLabs/BinaryCollection/Chapter_11L/Lab11-03.exe"
	pe=peData(file)
	print(pe.getMD5())
	print(pe.getSHA256())

if __name__ == '__main__':
	main()