from django.http import HttpResponseRedirect
from django.shortcuts import render, redirect
from django.conf import settings

from .forms import HashForm, URLForm, FileForm

from .models import File, FileImport, FileSection, FileExport

from .VTLibrary import handle_uploaded_file, VTHash, VTUrl, VTFile
from .PELibrary import getMD5, getSHA256, peData
from .MalwareDefinition import isMalware

import os
import uuid


def index(request):
    tot=File.objects.all()
    
    if len(tot)>0:
        pct=len(File.objects.filter(malware=True))*100/len(File.objects.all())
    else:
        pct=0

    context={
    'title':"Dashboard",
    'nbfiles':len(File.objects.all()),
    'nbmalwares':len(File.objects.filter(malware=True)),
    'percentmal':pct,
    'form':FileForm()
    }
    return render(request, 'classification/index.html', context)

def handle_file(f):
    filename='Uploads/'+str(uuid.uuid4())
    with open(os.path.join(settings.PROJECT_ROOT,filename), 'wb+') as destination:
        for chunk in f.chunks():
            destination.write(chunk)
    destination.close()
    return filename

def addNewFiles(request):
    if request.method == 'POST':
        form=FileForm(request.POST, request.FILES)

        if form.is_valid():
            f=handle_file(request.FILES['f'])

            ana=peData(os.path.join(settings.PROJECT_ROOT, f), os.path.join(settings.PROJECT_ROOT, 'userdb.txt'))
            md5=getMD5(os.path.join(settings.PROJECT_ROOT, f))

            if not File.objects.get(md5=md5):

                file=File.objects.create(
                    name=request.FILES['f'].name,
                    md5=md5,
                    sha=getSHA256(os.path.join(settings.PROJECT_ROOT, f)),
                    compile_date=ana.getDate(),
                    malware=isMalware(ana),
                    packer=ana.isPacked(),
                    entropy=ana.getEntropy(),
                    oep=ana.getOEP()
                    )

                file.save()

                for key, value in ana.getSections().items():
                    file.filesection_set.create(name=key,va=value)

                for key, value in ana.getImports().items():
                    file.fileimport_set.create(dll=key, function=value)

                exports=ana.getExports()
                if exports:
                    for value in exports:
                        file.fileexport_set.create(function=value)

                os.remove(os.path.join(settings.PROJECT_ROOT, f))        

            return redirect('classification:fileDetails', file_hash=md5)
        else:
            return HttpResponseRedirect('/')
    else:
        return HttpResponseRedirect('/')

def delFile(request, file_hash):
    file = File.objects.get(md5=file_hash)
    file.delete()
    return redirect('classification:filesView')

def informations(request):
    return render(request, 'classification/informations.html', {'title':"Informations"})

def virusTotal(request):
    formU = URLForm()
    formH = HashForm()
    formF = FileForm()
    return render(request, 'classification/virusTotal.html', {'title':"Virus Total Toolkit", 'formhash':formH, 'formURL':formU, 'formfile':formF})

def analyzeVT(request):
    if request.method == 'POST':
        
        formH = HashForm(request.POST)
        formU = URLForm(request.POST)
        formF = FileForm(request.POST, request.FILES)
        
        name="Virus Total Results - "
        
        if formH.is_valid():
            h=formH.cleaned_data['h']
            name+=h
            return render(request, 'classification/analyzeVT.html', {'title':name, 'res':VTHash(h)})
       
        elif formU.is_valid():
            u=formU.cleaned_data['u']
            name+=u
            return render(request, 'classification/analyzeVT.html', {'title':name, 'res':VTUrl(u)})
        
        elif formF.is_valid():
            f=handle_uploaded_file(request.FILES['f'])
            return render(request, 'classification/analyzeVT.html', {'title':name, 'res':VTFile(f)})
        
        else:
        	return HttpResponseRedirect('/')
    else:
    	return HttpResponseRedirect('/')

def malwaresView(request):
    files = File.objects.filter(malware=True).order_by('-added_date')
    context={
    'title':"Malware Profiles",
    'files':files
    }
    return render(request, 'classification/filesList.html', context)

def filesView(request):
    files = File.objects.all().order_by('-added_date')[:20]
    context={
    'title':"Last Analyses",
    'files':files
    }
    return render(request, 'classification/filesList.html', context)

def fileDetails(request, file_hash):
    file = File.objects.get(md5=file_hash)

    context={
    'title': "Details",
    'file': file,
    'sections': file.filesection_set.all(),
    'imports': file.fileimport_set.all(),
    'exports': file.fileexport_set.all()
    }

    return render(request, 'classification/fileDetails.html', context)